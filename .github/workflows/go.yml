name: Tests

on:
  # Publish `v1.2.3` tags as releases.
  release:
    # Publish the default branch as Docker `latest` image.
    types: [published]
  pull_request:
    branches: [ $default-branch ]

env:
  IMAGE_NAME: cbb
  DEFAULT_BRANCH: $default-branch

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go
      uses: actions/setup-go@v2.1.4
      with:
        go-version: ^1.17
      id: go

    - name: Set up linters
      run: |
        go install golang.org/x/lint/golint@latest
        go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go mod download

    - name: Run linters
      run: |
        golint ./...
        go vet ./...
        go vet -vettool=$(which shadow) ./...
        go test -v -race ./...

    - name: Run tests
      run: |
        go test -v -race ./...

  # Publish image to GitHub Packages.
  publish:
    name: Publish
    # Ensure test job passes before publishing image.
    needs: test

    runs-on: ubuntu-latest
    # Only run this on release being published.
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Publish image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention for default branch
          [ "$VERSION" == "$DEFAULT_BRANCH" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
